name: CI/CD to multi-account AWS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  tf_version: 1.3.7
  python_version: 3.9
  aws-region: eu-central-1
  workflow_role: arn:aws:iam::167758967276:role/GithubActionsWorkflowRole

# These permissions are needed to interact with GitHub's OIDC Token endpoint.
permissions:
  contents: "read"
  id-token: "write"

jobs:
  Init:
    runs-on: ubuntu-latest
    steps:
      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.python_version }}

      - name: set up terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.tf_version }}

      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.aws-region }}
          role-to-assume: ${{ env.workflow_role }}

  DeployDev:
    name: Deploy to Dev
    if: github.event_name == 'pull_request'
    needs: [ Init ]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./multi-account-setup/testETL
    environment:
      name: dev
    steps:
      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.aws-region }}
          role-to-assume: ${{ env.workflow_role }}
      - uses: actions/checkout@v3
      - name: multi-account-setup init
        run: terraform init
      - run: terraform fmt -check
      - run: |
          HEAD_REF=${{ github.head_ref }}
          BRANCH_NAME="${HEAD_REF////_}"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
      - run: terraform workspace select $BRANCH_NAME || terraform workspace new $BRANCH_NAME

      - name: multi-account-setup apply
        run: terraform apply -auto-approve -input=false -var="aws_account=dev" -var-file=./multi-account-setup/testETL/env/dev.tfvars


  DeployStaging:
    name: Deploy to Staging
    if: github.event.ref == 'refs/heads/main'
    needs: [ Init ]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./multi-account-setup/testETL
    environment:
      name: staging
    steps:
      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.aws-region }}
          role-to-assume: ${{ env.workflow_role }}
      - uses: actions/checkout@v3
      - name: multi-account-setup init
        run: terraform init
      - run: terraform fmt -check
      - run: terraform workspace select staging || terraform workspace new staging

      - name: multi-account-setup apply
        run: terraform apply -auto-approve -input=false -var="aws_account=staging" -var-file=./multi-account-setup/testETL/env/staging.tfvars

  DeployProd:
    name: Deploy to Production
    needs: [DeployStaging]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./multi-account-setup/testETL
    environment:
      name: prod
    steps:
      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.aws-region }}
          role-to-assume: ${{ env.workflow_role }}
      - uses: actions/checkout@v3
      - name: multi-account-setup init
        run: terraform init
      - run: terraform fmt -check
      - run: terraform workspace select prod || terraform workspace new prod

      - name: multi-account-setup apply
        run: terraform apply -auto-approve -input=false -var="aws_account=prod" -var-file=./multi-account-setup/testETL/env/prod.tfvars


