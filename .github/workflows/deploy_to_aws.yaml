name: CI/CD to multi-account AWS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  tf_version: 1.3.7
  python_version: 3.9

jobs:
  Init:
    runs-on: ubuntu-latest
      steps:
        # Checkout the repository to the GitHub Actions runner
        - name: checkout
          uses: actions/checkout@v3

        - name: set up python
          uses: actions/setup-python@v3
          with:
            python-version: ${{ env.python_version }}

        - name: set up terraform
          uses: hashicorp/setup-terraform@v2
          with:
            terraform_version: ${{ env.tf_version }}

        - name: configure AWS credentials
          uses: aws-actions/configure-aws-credentials@master
          with:
            aws-region: eu-central-1
            role-to-assume: arn:aws:iam::<managing_account_id>:role/GitHubActions_Workflow_role

  DeployDev:
    name: Deploy to Dev
      if: github.event_name == 'pull_request'
      needs: [ Init ]
      runs-on: ubuntu-latest
      defaults:
        run:
          working-directory: ./tf/testETL
      environment:
        name: dev
      steps:
          # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
        - name: tf init
        - run: terraform init
        - run: terraform fmt -check
        - run: echo "::set-env name=BRANCH_NAME::${{ github.head_ref }}"
        - run: terraform workspace select $BRANCH_NAME || terraform workspace new $BRANCH_NAME

        - name: tf apply
          run: terraform apply -auto-approve -input=false -var="aws_account=dev" -var-file=dev.tfvars


  DeployStaging:
    name: Deploy to Staging
      if: github.event.ref == 'refs/heads/main'
      needs: [ Init ]
      runs-on: ubuntu-latest
      defaults:
        run:
          working-directory: ./tf/testETL
      environment:
        name: staging
      steps:
        - name: tf init
        - run: terraform init
        - run: terraform fmt -check
        - run: terraform workspace select staging || terraform workspace new staging

        - name: tf apply
          run: terraform apply -auto-approve -input=false -var="aws_account=staging" -var-file=staging.tfvars

  DeployProd:
    name: Deploy to Production
    needs: [DeployStaging]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./tf/testETL
    environment:
      name: prod
    steps:
       # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: tf init
      - run: terraform init
      - run: terraform fmt -check
      - run: terraform workspace select prod || terraform workspace new prod

      - name: tf apply
        run: terraform apply -auto-approve -input=false -var="aws_account=prod" -var-file=prod.tfvars


